#!/usr/bin/env python3

# Connect to the desktop of the KVM on my home network where Quicken runs

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

#  Set these variables
node_uri = 'qemu+ssh://root@myhost.localdomain/system'
	#  The value used with the "--connect=" option on the "virsh" command.
	#  This specifies the location and access method for the host that is
	#  running the KVM.
domain_name = 'windows-10'		#  The name of the KVM 
userid = 'myuserid'				#  The Windows Remote Desktop userid
password = 'mypassword'			#  The Windows Remote Desktop password

import subprocess
import time

notify_program_name = 'Quicken'
notify_icon_file = 'quicken-kvm-access'

def run_cmd(cmd):
	return subprocess.run(cmd, shell=True, capture_output=True)

#  If the VM isn't running then start it up
result = run_cmd('virsh --connect=\'{}\' domstate {}'.format(node_uri, domain_name))
if str(result.stdout, 'utf-8').strip() != 'running':
	result = run_cmd('virsh --connect=\'{}\' start {}'.format(node_uri, domain_name))
	run_cmd('notify-send -i "{}" "{}" "Waiting for {} VM to start"'.format(notify_icon_file, notify_program_name, domain_name))

if result.returncode == 0:
	#  Get the VM's ip address
	result = run_cmd('virsh --connect=\'{}\' domifaddr {} --source arp'.format(node_uri, domain_name))
	for line in str(result.stdout, 'utf-8').split('\n'):
		if line.strip().startswith('vnet0'):
			ipaddr = line.split()[3].split('/')[0]
			#  Connect to it
			connected = False
			while not connected:
				result = run_cmd('echo \'{}\' | rdesktop -u {} -p - -g 100%x100% {}'.format(password, userid, ipaddr))
				#  The rdesktop command has to be run manually in a terminal
				#  one time so that the host certificate can be accepted.
				if 'unable to connect' not in str(result.stderr, 'utf-8'):
					connected = True
			run_cmd('notify-send -i {} "{}" "{}"'.format(notify_icon_file, notify_program_name, str(result.stderr, 'utf-8').split('\n')[-2]))
